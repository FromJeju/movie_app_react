{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","summary","rating","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","prototype","PropTypes","string","isRequired","array","App","state","requestSent","pageNum","movies","_handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","_this","_querySearchResult","setState","_getMovies","_renderMovie","movie","src_Movie","large_cover_image","id","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","concat","stop","fetch","then","response","redirected","json","data","catch","err","console","log","_loading","this","addEventListener","removeEventListener","length","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45178840.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis';\n\nfunction Movie({title, poster, genres, summary, rating}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <span className=\"Movie__rating\">{rating}</span>\n                <LinesEllipsis\n                    className=\"Movie__Synopsis\"\n                    text={summary}\n                    maxLine='5'\n                    ellipsis=' ...'\n                    trimRight\n                    basedOn='letters'\n                />\n                </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt} />\n    )\n}\n\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.prototype = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genre: PropTypes.array.isRequired,\n    summary: PropTypes.string.isRequired,\n    rating: PropTypes.string.isRequired\n}\n\nMoviePoster.prototype = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.prototype = {\n    genre: PropTypes.string.isRequired\n}\n\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentwillUpdate() -> render() -> componentDidUpdate()\n\n  state = {\n    requestSent: false,\n    pageNum: 1,\n    movies: []\n  }\n\n  componentDidMount(){\n    this._getMovies(1)\n    window.addEventListener('scroll', this._handleOnScroll);\n  }\n  componentWillUnmount(){\n    window.removeEventListener('scroll', this._handleOnScroll);\n  }\n\n  // scroll check\n  _handleOnScroll = () => {\n    // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n    var scrollTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n    var scrollHeight = (document.documentElement && document.documentElement.scrollHeight) || document.body.scrollHeight;\n    var clientHeight = document.documentElement.clientHeight || window.innerHeight;\n    var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n\n    if (scrolledToBottom) {\n      this._querySearchResult();\n    }\n  }\n\n  _querySearchResult = () => {\n      if (this.state.requestSent) {\n        return;\n      }\n      this.setState({\n        pageNum: this.state.pageNum + 1\n      })\n      this._getMovies(this.state.pageNum);\n      this.setState({requestSent: true});\n  }\n\n  _renderMovie = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n        title={movie.title} \n        poster={movie.large_cover_image} \n        key={movie.id} \n        genres={movie.genres} \n        summary={movie.summary} \n        rating={movie.rating} \n      />\n    })\n    return movies\n  }\n\n  _getMovies = async (pageNum) => {\n    const movies = await this._callApi(pageNum)\n    if(pageNum === 1){\n      this.setState({\n        movies\n      })\n    } else {\n      this.setState({\n        movies : this.state.movies.concat(movies)\n        \n      })\n    }\n    this.setState({requestSent: false});\n  }\n\n  _callApi = (pageNum) => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count&page=' + pageNum)\n    .then(function(response) {\n      if(!response.redirected){\n        return response.json()\n        .then(json => json.data.movies)\n      }\n    })\n    .catch(err => console.log(err))\n  }\n  \n  _loading = (text) => {\n    return (\n      <div className=\"Loading\">{text}</div>\n    )\n  }\n  render() {\n    const { movies } = this.state\n    \n    return (\n      <div className={movies.length !== 0 ? \"App\" : \"App--loading\"}>\n        \n        {movies.length !== 0 ? this._renderMovie() : \"Loading...\"}\n        {this.state.requestSent ? this._loading(\"Loading...\") : \"\"}\n      </div>\n      \n      \n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}